{"version":3,"sources":["components/HomePage.module.css","components/NavBar.tsx","components/AboutPage.tsx","ModelService.tsx","components/HomePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NavBar","bg","variant","Brand","as","Link","to","window","APP_CONFIG","title","className","React","Component","AboutPage","source","about","ModelService","mobilenet","image_size","classes","top_k","this","initializeBrowserModel","a","modelAssetUrl","tf","predict","axios","get","resPromise","res","data","console","error","alert","args","url","fetch","response","blob","metadata","type","imageData","File","FormData","append","startTime","Date","getTime","post","endTime","duration_total","element","logits","imageTensor","fromPixels","resizeBilinear","toFloat","offset","batched","sub","div","reshape","getTopKClasses","predictions","duration_inference","topK","scores","i","length","push","label","confidence","sort","b","slice","breaks","require","HomePage","state","imageSelected","isLoading","file","browserResponse","serverResponse","rawFile","imageRef","createRef","modelService","_clear","setState","_onUrlChange","indexOf","_onFileUpload","event","files","target","currentFile","URL","createObjectURL","_predict","predictServerSideInference","serverRes","predictBrowserSideInference","current","browserRes","log","e","sampleUrlSelected","si","predictionItems","map","item","toFixed","sampleImages","description","onClick","key","name","value","onChange","id","accept","custom","src","styles","img_preview","alt","hidden","crossOrigin","ref","color","disabled","animation","style","width","height","renderPredictions","escapeHtml","plugins","App","basename","process","role","exact","path","component","Boolean","location","hostname","match","config","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.26dee959.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"img_preview\":\"HomePage_img_preview__2mvwU\",\"upload_button\":\"HomePage_upload_button__3639O\"};","import React from 'react';\nimport {Nav, Navbar} from \"react-bootstrap\";\nimport {Link} from \"react-router-dom\";\n\nexport default class NavBar extends React.Component<{}, {  }> {\n    render() {\n\n        return (\n            <Navbar bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand as={Link} to=\"/\">{window.APP_CONFIG.title}</Navbar.Brand>\n\n                <Nav className=\"mr-auto\">\n\n                    <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n                    <Nav.Link as={Link} to=\"/about\">About</Nav.Link>\n\n                </Nav>\n\n            </Navbar>\n        );\n    }\n}","import React from 'react';\nimport ReactMarkdown from \"react-markdown\";\n\nexport default class AboutPage extends React.Component<{}, { } > {\n    render() {\n        return (\n            <div>\n                <h1>About</h1>\n                <ReactMarkdown source={window.APP_CONFIG.about}/>\n            </div>\n        );\n    }\n}","import axios from \"axios\";\nimport {InferenceResult, InferencerPrediction} from \"./model\";\nimport * as tf from '@tensorflow/tfjs';\n\n\nexport class ModelService {\n\n    private mobilenet: any = null;\n    private image_size: number;\n    private classes: string[];\n    private top_k: number;\n\n    constructor() {\n        this.mobilenet = null;\n        this.initializeBrowserModel()\n        this.image_size = window.APP_CONFIG.image_size;\n        this.classes = [];\n        this.top_k = window.APP_CONFIG.top_k;\n    }\n\n    async initializeBrowserModel() {\n        /**\n         * Initialize tfjs model and load classes\n         */\n        const modelAssetUrl = '/assets/model_tfjs/model.json'\n        try {\n            const mobilenet = await tf.loadGraphModel(modelAssetUrl);\n            mobilenet.predict(tf.zeros([1, this.image_size, this.image_size, 3]));\n\n            this.mobilenet = mobilenet;\n\n            const resPromise = await axios.get<string[]>(`/api/classes`);\n            const res = resPromise.data;\n            this.classes = res;\n        } catch (e) {\n            console.error(`Failed to load mobilenet model from ${modelAssetUrl} ${e}`)\n            alert(e)\n        }\n\n    }\n\n    async predictServerSideInference(args: { url: string | null, imageData: any }) {\n        /**\n         * Server Based inference using remote http call\n         */\n        if (args.url) {\n            const response = await fetch(args.url);\n            let data = await response.blob();\n            let metadata = {\n                type: 'image/jpeg'\n            };\n            args.imageData = new File([data], 'upload.jpeg', metadata)\n        }\n\n        if (args.imageData) {\n\n            const data = new FormData();\n            data.append('file', args.imageData);\n\n            let startTime = new Date().getTime();\n\n            const resPromise = await axios.post<InferenceResult>(`/api/predict_image`, data);\n            const res = resPromise.data;\n            const endTime = new Date().getTime();\n\n            res.duration_total = (endTime - startTime);\n\n            return res\n        }\n\n        return null;\n    }\n\n    async predictBrowserSideInference(element: HTMLImageElement | any): Promise<InferenceResult | null> {\n        if(!this.mobilenet){\n            await this.initializeBrowserModel()\n        }\n\n        /**\n         * Browser Based inference using loaded tfjs model\n         */\n        const startTime = new Date().getTime();\n\n        const logits = tf.tidy(() => {\n            // tf.browser.fromPixels() returns a Tensor from an image element.\n\n            let imageTensor = tf.browser.fromPixels(element)\n                .resizeBilinear([this.image_size, this.image_size])\n                .toFloat();\n\n            const offset = tf.scalar(127.5);\n            // Normalize the image from [0, 255] to [-1, 1].\n            const normalized = imageTensor.sub(offset).div(offset);\n\n\n            // Reshape to a single-element batch so we can pass it to predict.\n            const batched = normalized.reshape([1, this.image_size, this.image_size, 3]);\n\n            // Make a prediction through mobilenet.\n            return this.mobilenet.predict(batched);\n        });\n\n        // Convert logits to probabilities and class names.\n        const predictions = await this.getTopKClasses(logits, this.top_k, this.classes);\n\n        //logits.dispose()\n\n        const endTime = new Date().getTime();\n\n        const res = {} as InferenceResult;\n        res.duration_total = (endTime - startTime);\n        res.duration_inference = res.duration_total;\n        res.predictions = predictions;\n\n        return res;\n\n    }\n\n    async getTopKClasses(logits: any, topK: number, classes: string[]) {\n        /**\n         * Get top n predictions from raw probabilities and class names\n         */\n        const scores = await logits.data();\n\n\n        const predictions: InferencerPrediction[] = [];\n        for (let i = 0; i < classes.length; i++) {\n            predictions.push({\n                label: classes[i]\n                , confidence: scores[i]\n            })\n        }\n\n        predictions.sort((a, b) => {\n            return b.confidence - a.confidence;\n        });\n\n        const res = predictions.slice(0, topK)\n        return res\n\n\n    }\n}\n\n\n","import React, {ChangeEvent} from 'react';\nimport {Button, Col, Dropdown, Form, FormGroup, Row, Spinner} from \"react-bootstrap\";\nimport DropdownToggle from \"react-bootstrap/DropdownToggle\";\nimport DropdownItem from \"react-bootstrap/DropdownItem\";\nimport DropdownMenu from \"react-bootstrap/DropdownMenu\";\nimport {ImageItem, InferenceResult} from \"../model\";\nimport styles from \"./HomePage.module.css\";\nimport {ModelService} from \"../ModelService\";\nimport ReactMarkdown from \"react-markdown\";\nconst breaks = require('remark-breaks')\n\n\ninterface IState {\n    url: string\n    imageSelected: boolean\n    isLoading: boolean\n    file: string\n    browserResponse: InferenceResult | null\n    serverResponse: InferenceResult | null\n    rawFile: File | null\n}\n\nexport default class HomePage extends React.Component<{}, IState> {\n\n    state: IState = {\n        url: \"\",\n        imageSelected: false,\n        isLoading: false,\n        file: \"\",\n        browserResponse: null,\n        serverResponse: null,\n        rawFile: null\n\n    }\n    private imageRef = React.createRef<HTMLImageElement>()\n\n\n    modelService = new ModelService();\n\n    _clear = () => {\n        this.setState({\n            file: \"\",\n            imageSelected: false,\n            browserResponse: null,\n            serverResponse: null,\n            rawFile: null,\n            url: \"\"\n        })\n\n    }\n\n    _onUrlChange = (url: string) => {\n        //this.state.url = url;\n        if ((url.length > 5) && (url.indexOf(\"http\") === 0)) {\n            this.setState({\n                url: url,\n                file: url,\n                imageSelected: true\n            })\n        }\n    }\n\n    _onFileUpload = (event?: ChangeEvent<HTMLInputElement>) => {\n        const files = event?.target?.files;\n\n        if (files && files.length > 0) {\n            const currentFile = files[0]\n            this.setState({\n                rawFile: currentFile,\n                file: URL.createObjectURL(currentFile),\n                imageSelected: true\n            })\n        }\n\n\n    }\n\n    _predict = async (event: any) => {\n\n        if (this.state.url || this.state.rawFile) {\n            this.setState({isLoading: true});\n\n            const serverRes = await this.modelService.predictServerSideInference({url: this.state.url, imageData: this.state.rawFile});\n            const browserRes = await this.modelService.predictBrowserSideInference(this.imageRef.current);\n\n            try {\n\n\n                this.setState({serverResponse: serverRes, browserResponse: browserRes, isLoading: false});\n                console.log(serverRes)\n            } catch (e) {\n                this.setState({isLoading: false});\n                alert(e)\n            }\n        } else {\n            alert(\"Either URL or image needs to be set\")\n        }\n    }\n\n    renderPredictions(res: InferenceResult | undefined | null) {\n        if (res && res.predictions && res.predictions.length > 0) {\n\n            const predictionItems = res.predictions.map((item) =>\n                <li>{item.label} ({item.confidence.toFixed(4)} ) </li>\n            );\n\n            return (\n                <div>\n                    <ul>\n                        {predictionItems}\n                    </ul>\n\n                    <div>Duration (inference): {res.duration_inference} ms</div>\n                    <div>Duration (total): {res.duration_total} ms</div>\n                </div>\n\n            )\n\n        } else {\n            return null\n        }\n\n    }\n\n    sampleUrlSelected = (si: ImageItem) => {\n        this._onUrlChange(si.url);\n    }\n\n    render() {\n        const sampleImages = window.APP_CONFIG.sampleImages;\n\n        const notes = `\nServer side inference makes a call every time to /api/predict_image . \n\nBrowser side inference makes an initial call to /assets/model_tfjs/model.json to fetch the model and future inference happens locally.\n`\n\n        return (\n            <div>\n                <h1>{window.APP_CONFIG.description}</h1>\n                <p>Select an image </p>\n\n                <Form>\n                    <FormGroup>\n                        <div>\n                            <p>Provide a URL</p>\n                            <div>\n\n                                <Dropdown>\n                                    <DropdownToggle>\n                                        Sample Image URL\n                                    </DropdownToggle>\n                                    <DropdownMenu>\n                                        {sampleImages.map(si =>\n                                            <DropdownItem onClick={() => this.sampleUrlSelected(si)} key={si.name}>\n                                                {si.name}\n                                            </DropdownItem>)\n                                        }\n\n                                    </DropdownMenu>\n                                </Dropdown>\n\n                            </div>\n                            <input className=\"form-control\" value={this.state.url} name=\"file\" onChange={(e) => this._onUrlChange(e.target.value)}/>\n\n                        </div>\n                    </FormGroup>\n\n                    <h3>OR</h3>\n                    <FormGroup id={\"upload_button\"}>\n                        <div>\n                            <p>Upload an image</p>\n                        </div>\n                        <div id=\"imageUpload\">\n\n                            <Form.File\n                                id=\"custom-file\"\n                                label=\"Upload an image\"\n                                accept=\".png, .jpg, .jpeg\"\n                                custom\n                                onChange={this._onFileUpload}\n                            />\n                        </div>\n                    </FormGroup>\n\n                    <img src={this.state.file} className={styles.img_preview} alt={\"selected_img\"} hidden={!this.state.imageSelected} crossOrigin=\"anonymous\" ref={this.imageRef}/>\n\n                    <FormGroup>\n                        <Button color=\"success\" onClick={this._predict}\n                                disabled={this.state.isLoading}> Predict</Button>\n                        <span className=\"p-1 \"/>\n                        <Button color=\"danger\" onClick={this._clear}> Clear</Button>\n                    </FormGroup>\n\n\n                    {this.state.isLoading && (\n                        <div>\n                            <Spinner animation=\"grow\" color=\"primary\" style={{width: '5rem', height: '5rem'}}/>\n\n                        </div>\n                    )}\n\n                </Form>\n\n                <div className={\"mb-5\"} id=\"prediction-container\">\n                    <Row>\n                        <Col>\n                            <h2> Server Side Inference</h2>\n                            <p> Predictions</p>\n                            {this.renderPredictions(this.state.serverResponse)}\n                        </Col>\n\n                        <Col>\n                            <h2> Client Side Inference</h2>\n                            <p> Predictions</p>\n                            {this.renderPredictions(this.state.browserResponse)}\n                        </Col>\n                    </Row>\n\n                </div>\n\n                <div >\n                    <h3>Notes</h3>\n                    <ReactMarkdown source={notes} escapeHtml={false} plugins={[breaks]} />\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter as Router, Route, Switch,} from \"react-router-dom\";\nimport NavBar from \"./components/NavBar\"\nimport AboutPage from \"./components/AboutPage\"\nimport HomePage from \"./components/HomePage\"\n\n\nclass App extends React.Component<{}, {}> {\n\n\n    render() {\n        return (\n            <Router basename={process.env.PUBLIC_URL}>\n                <div>\n                    <NavBar/>\n\n                    <main role=\"main\" className=\"container\">\n                        <Switch>\n                            <Route exact path=\"/\" component={HomePage}/>\n                            <Route exact path=\"/about\" component={AboutPage}/>\n                        </Switch>\n                    </main>\n\n\n                </div>\n            </Router>\n        )\n\n\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this artifacts.model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {config} from \"./config.json\"\n\n\n\n\nwindow.APP_CONFIG = config;\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}